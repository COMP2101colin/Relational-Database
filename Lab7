SET SQL_MODE = "STRICT_ALL_TABLES";
SET DEFAULT_STORAGE_ENGINE =  INNODB;

/*
 Question 1 (7 marks)
 
  Create a query that SELECT all of the EMPLOYEES from the EMPLOYEE TABLE that are Mangers.   Include Employee ID first name, Lastname and Salary (Hint: Self Join)
 
  
*/
 CREATE DATABASE ASSIGNMENT7;
 USE ASSIGNMENT7;
 
 SELECT E1.EMPNO AS EMPLOYEE_ID, E1.FIRSTNME AS FIRST_NAME, E1.LASTNAME AS LAST_NAME, E1.SALARY FROM EMPLOYEE E1, EMPLOYEE E2
 WHERE E1.FIRSTNME = E2.FIRSTNME 
 AND   E1.LASTNAME = E2.LASTNAME
 AND   E1.SALARY   = E2.SALARY;


/*
 Question 2 (6 marks)
 
 Write a query the gives the Employee ID first name, Lastname and Salary and Project Number of EMPLOYEES who aren't currently assigned to a project (hint outer join)
 
*/
SELECT E.EMPNO AS EMPLOYEE_ID, E.FIRSTNME AS FIRST_NAME, E.LASTNAME AS LAST_NAME, E.SALARY, P.PROJNO AS PROJECT_NUMBER FROM EMPLOYEE E
LEFT OUTER JOIN PROJECT P 
ON E.WORKDEPT = P.DEPTNO
WHERE E.WORKDEPT NOT IN 
(SELECT DEPTNO FROM PROJECT);



/*
 Question 3 (8 marks)
 
Create a query that lists the lastnme, edlevel , job, the number of years they've worked as of Jan 01/2002 ( hint : year function Jan 01/2002 minus hiredate), and their salary.  
Get the employees that have the same Job  as the employee named starts with J  (hint subquery from employee) and hiredate < Jan 01/2002  Sort the listing by highest salary first.  
 
*/
SELECT LASTNAME, EDLEVEL AS EDUCATION_LEVEL, JOB, 2002 - YEAR(HIREDATE) AS WORKED_YEARS, SALARY FROM EMPLOYEE
WHERE EMPLOYEE.LASTNAME IN 
(SELECT LASTNAME FROM EMPLOYEE
  WHERE LASTNAME LIKE 'J%')
AND HIREDATE < '2002-01-01'
ORDER BY SALARY DESC;

/*
 Question 4 ( 7 marks )
 
 Create a table with a COMPOSITE PRIMARY KEY (mininum 3 columns the table) and the second table will have will have a foreign keys to the PRIMARY KEY 
 
 Run the Reverse Engineer function in MySQL workbench on these tables and provide the .MWB file in your submission 
 
*/
CREATE TABLE CARINFO_1 (
CAR_ID INT UNSIGNED AUTO_INCREMENT NOT NULL,
COLOR_ID VARCHAR(10) NOT NULL,
MANUFACTURER CHAR(15) NOT NULL,
MODELNAME VARCHAR(30) NOT NULL,
PRIMARY KEY (CAR_ID, COLOR_ID) 
);

CREATE TABLE CARINFO_2 (
CAR_ID INT UNSIGNED NOT NULL,
COLOR_ID VARCHAR(10) NOT NULL,
NUMBER_PLATE VARCHAR(20) NOT NULL PRIMARY KEY, 
CAR_PRICE DEC(10) NOT NULL,
FOREIGN KEY (CAR_ID, COLOR_ID) REFERENCES CARINFO_1(CAR_ID, COLOR_ID));

 
/*
 Question 5 (12 marks)
 
 Create a table in 1NF (mininum 5 columns the table).  Then transform that table into as many tables as necessary to satisfy 2NF.Then transform that table into as many tables as necessary to satisfy 3NF
  

*/ 
#1NF TABLE
 
 CREATE TABLE MOVIE_INFO(
 MOVIE_ID NUMERIC(30) NOT NULL,
 MOVIE_TITLE VARCHAR(30) NOT NULL,
 MOVIE_GENRE VARCHAR(30) NOT NULL,
 MOVIE_RATING ENUM('0','1','2','3','4','5','6','7','8','9','10') DEFAULT '0',
 RELEASE_DATE DATE,
 DRCTR_ID NUMERIC(30) NOT NULL,
 FIRST_NAME VARCHAR(30) NOT NULL,
 LAST_NAME VARCHAR(30) NOT NULL,
 DRCTR_AGE NUMERIC(30) NOT NULL,
 PRIMARY KEY (MOVIE_ID, DRCTR_ID));

#2NF TABLES
 CREATE TABLE MOVIE_INFO0(
 MOVIE_ID NUMERIC(30) NOT NULL,
 MOVIE_TITLE VARCHAR(30) NOT NULL,
 MOVIE_GENRE VARCHAR(30) NOT NULL,
 MOVIE_RATING ENUM('0','1','2','3','4','5','6','7','8','9','10') DEFAULT '0',
 RELEASE_DATE DATE,
 PRIMARY KEY (MOVIE_ID));
 
 CREATE TABLE MOVIE_INFO1(
 MOVIE_ID NUMERIC(30) NOT NULL,
 MOVIE_TITLE VARCHAR(30) NOT NULL,
 MOVIE_GENRE VARCHAR(30) NOT NULL,
 PRIMARY KEY (MOVIE_ID));
 
 CREATE TABLE MOVIE_INFO2(
 MOVIE_ID NUMERIC(30) NOT NULL,
 MOVIE_RATING ENUM('0','1','2','3','4','5','6','7','8','9','10') DEFAULT '0',
 RELEASE_DATE DATE,
 PRIMARY KEY (MOVIE_ID));

 CREATE TABLE MOVIE_INFO3(
 DRCTR_ID NUMERIC(30) NOT NULL,
 FIRST_NAME VARCHAR(30) NOT NULL,
 LAST_NAME VARCHAR(30) NOT NULL,
 DRCTR_AGE NUMERIC(30) NOT NULL,
 PRIMARY KEY (DRCTR_ID));
 
 #3NF TABLES
 
 CREATE TABLE MOVIE_INFO5(
 MOVIE_ID NUMERIC(30) NOT NULL,
 MOVIE_TITLE VARCHAR(30) NOT NULL,
 MOVIE_GENRE VARCHAR(30) NOT NULL,
 MOVIE_RATING ENUM('0','1','2','3','4','5','6','7','8','9','10') DEFAULT '0',
 RELEASE_DATE DATE,
 DRCTR_ID NUMERIC(30) NOT NULL,
 FIRST_NAME VARCHAR(30) NOT NULL,
 LAST_NAME VARCHAR(30) NOT NULL,
 DRCTR_AGE NUMERIC(30) NOT NULL,
 PRIMARY KEY (MOVIE_ID));
 
 
 CREATE TABLE MOVIE_INFO6(
 MOVIE_ID NUMERIC(30) NOT NULL,
 MOVIE_TITLE VARCHAR(30) NOT NULL,
 MOVIE_RATING ENUM('0','1','2','3','4','5','6','7','8','9','10') DEFAULT '0',
 DRCTR_ID NUMERIC(30) NOT NULL,
 FIRST_NAME VARCHAR(30) NOT NULL,
 LAST_NAME VARCHAR(30) NOT NULL,
 PRIMARY KEY (MOVIE_ID));
 
 CREATE TABLE MOVIE_INFO7(
 MOVIE_ID NUMERIC(30) NOT NULL,
 MOVIE_TITLE VARCHAR(30) NOT NULL,
 MOVIE_RATING ENUM('0','1','2','3','4','5','6','7','8','9','10') DEFAULT '0',
 PRIMARY KEY (MOVIE_ID));
 
 CREATE TABLE MOVIE_INFO8(
 DRCTR_ID NUMERIC(30) NOT NULL,
 FIRST_NAME VARCHAR(30) NOT NULL,
 LAST_NAME VARCHAR(30) NOT NULL,
 PRIMARY KEY (DRCTR_ID));
 
 
/*
 Question 6 (10 marks)
 
  Create a View (V_EMP_DEPT_PROJ) statement that joins the EMPLOYEE and EMPPROJACT (join on EMPNO)  and PROJECT table (join on PROJNO).  Limit the view to contain :
o	ID
o	Name (FirstName and Lastname)
o	WorkDept
o	Salary
o	ACTNO
o	PROJNO
o	PROJNAME
o	Where Salary < 100000

  
 */
 CREATE VIEW V_EMP_DEPT_PROJ AS
 ( SELECT E1.EMPNO, (CONCAT(E1.FIRSTNME,'',E1.LASTNAME)) AS NAME, E1.WORKDEPT, E1.SALARY, E2.ACTNO, E2.PROJNO, P.PROJNAME FROM EMPLOYEE E1
 INNER JOIN EMPPROJACT E2
 ON E1.EMPNO = E2.EMPNO
 INNER JOIN PROJECT P
 ON E2.PROJNO = P.PROJNO
 WHERE E1.SALARY < 100000 
 ); 
